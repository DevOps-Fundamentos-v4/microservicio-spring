plugins {
	id 'org.springframework.boot' version '2.6.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id ("org.sonarqube") version "4.0.0.2929"
}

apply plugin: 'java'


jacoco {
	toolVersion = "0.8.8"
	reportsDirectory = file("$buildDir/jacoco") // Directorio de destino para el informe HTML
}

sonarqube{
	properties{
		property("sonar.projectKey", "mostwanted001_microservicio-spring")
		property("sonar.organization", "mostwanted001")
		property("sonar.host.url", "https://sonarcloud.io")
		def projectPath = "**/*com/example/testingweb"
		def exclusionList = [
			      "${projectPath}/test/*"
		]
	}
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
	jacoco.includeNoLocationClasses = true
	jacoco.excludes = ['jdk.internal.*']
	jacoco.includes = []	
}


jacocoTestReport  {
	dependsOn test
	reports {
		html.enabled = true // Habilitar informe HTML
		xml.enabled = true // Habilitar informe XML
		csv.enabled = false // Deshabilitar informe CSV
	}

	

	classDirectories.setFrom(files(sourceSets.main.output.classesDirs))
	sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
	executionData.setFrom(files("${buildDir}/jacoco/test.exec"))	
}

afterEvaluate{
	classDirectories.setFrom(files(classDirectories.files.collect{
		fileTree(dir: it, exclude:[
			'com./example/testingweb/test/*'
		])
	}))
}








